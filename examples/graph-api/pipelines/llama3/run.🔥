# ===----------------------------------------------------------------------=== #
# Copyright (c) 2024, Modular Inc. All rights reserved.
#
# Licensed under the Apache License v2.0 with LLVM Exceptions:
# https://llvm.org/LICENSE.txt
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ===----------------------------------------------------------------------=== #

import sys
from pathlib import Path
from utils.index import Index
from testing import assert_true

from max.engine import InferenceSession, Model, SessionOptions, TensorMap
from max._driver import cpu_device, cuda_device
from max.graph import Graph
from max.graph.quantization import (
    Float32Encoding,
    BFloat16Encoding,
    QuantizationEncoding,
    Q4_0Encoding,
    Q4_KEncoding,
    Q6_KEncoding,
)
from max.tensor import Tensor, TensorShape, TensorSpec

from .kv_cache import KVCache
from .metrics import Metrics
from .model.llama import Llama3
from ..tokenizer.tiktoken import TikTokenEncoder
from ..tokenizer.regex import set_locale_unicode
from ..configs.llama import (
    LlamaConfigRegistry,
    get_llama_base_default_config,
)
from ..configs.registry import ConfigRegistryDict
from ..configs.parse_args import (
    OptionTypeEnum,
    OptionValue,
    parse_args,
    register_pipeline_configs,
)
from ..samplers.weighted_sampler import WeightedSampler
from ..weights.download import download_to_cache
from ..weights.gguf import GGUFArray, GGUFFile
from ..weights.loadable_model import LlamaHParams, LoadableModel


@value
struct Config:
    """Configuration for token generation runtime options."""

    var config: Dict[String, OptionValue]

    def __init__(inout self):
        config_registry = LlamaConfigRegistry(ConfigRegistryDict())

        default_configs = get_llama_base_default_config()
        self.config = register_pipeline_configs(
            config_registry.registry,
            parse_args(),
            default_configs,
        )

        @parameter
        if sys.has_neon():
            encoding = self.config["quantization-encoding"]
            if encoding[String] == "bfloat16":
                raise "bfloat16 is not currently supported on ARM"

    fn get(inout self, key: String) raises -> OptionValue:
        """Returns an option value for `key` in the underlying config.

        Args:
            key: Key for the underlying config option.

        Returns:
            An OptionValue.

        Raises:
            An error for invalid key.
        """
        return self.config[key]

    fn set(inout self, key: String, val: OptionValue):
        """Sets a new value for a given config key. This will overwrite the old
        value if the key is already present.

        Args:
            key: A string based key for the underlying config option.
            val: A new value for a key that already exist.
        """
        self.config[key] = val


def execute(
    session: InferenceSession,
    model: Model,
    tokens: Tensor[DType.int64],
    inout kv_cache: KVCache,
) -> Tensor[DType.float32]:
    """Execute the model predicting one new token."""
    input_map = session.new_tensor_map()
    input_map.borrow("input0", tokens)
    input_map.borrow("input1", kv_cache.keys_view())
    input_map.borrow("input2", kv_cache.values_view())
    results = model.execute(input_map)
    kv_cache.update(
        results.buffer[DType.float32]("output1"),
        results.buffer[DType.float32]("output2"),
    )
    return results.get[DType.float32]("output0")


def compile_graph(
    session: InferenceSession,
    graph: Graph,
    custom_ops_paths: List[Path] = List[Path](),
) -> Model:
    """Compiles a staged graph using the graph compiler."""
    print("Compiling...")
    return session.load(graph, custom_ops_paths=custom_ops_paths)


def generate_text(
    tokenizer: TikTokenEncoder,
    compiled_model: Model,
    params: LlamaHParams,
    config: Config,
    inout metrics: Metrics,
):
    """Generates text by applying the compiled model to the provided prompt."""

    metrics.begin_timing_prompt()

    prompt = tokenizer.encode(config.get("prompt")[String])
    sampler = WeightedSampler(
        config.get("temperature")[Float64], config.get("min-p")[Float64]
    )
    metrics.set_tokens_in_prompt(prompt.size)

    tokens = Tensor[DType.int64](TensorShape(1, len(prompt)))
    for i in range(len(prompt)):
        tokens[Index(0, i)] = prompt[i]

    print("Executing...")
    for token in prompt:
        print(tokenizer.decode(token[]), end="")

    kv_cache = KVCache(
        params, config.get("max-tokens")[Int], config.get("batch-size")[Int]
    )

    # The first iteration caches the entire prompt and all subsequent
    # iterations generate one token.
    # Avoid overrunning the cache by setting the trip count accordingly.
    metrics.begin_timing_generation()
    for _ in range(prompt.size, config.get("max-tokens")[Int] + 1):
        logits = execute(
            compiled_model._session, compiled_model, tokens, kv_cache
        )
        token = Int64(sampler.sample(logits).selected)
        tokens = Tensor(TensorShape(1, 1), token)
        metrics.new_token()
        print(tokenizer.decode(token), end="")
    print()
    metrics.end_timing()


def run[encoding: QuantizationEncoding](config: Config) -> None:
    if config.get("prompt")[String] == "I believe the meaning of life is":
        print("Using default prompt, provide an argument to change it:")
        print('    --prompt "Hello llama3"')
    metrics = Metrics()
    metrics.begin_timing_startup()
    model = Llama3[encoding](config.get("model-path")[Path])
    params = model.hyperparams()

    print("Loading tokenizer...")
    tokenizer = TikTokenEncoder.cl100k_base_llama3(
        model.model["tokenizer.ggml.tokens"]._value.unsafe_get[GGUFArray]()[]
    )

    print("Building model...")
    graph = model.build_graph("llama_model")

    session_options = SessionOptions(
        cuda_device() if config.get("experimental-use-gpu")[
            Bool
        ] else cpu_device()
    )
    session = InferenceSession(session_options)

    compiled_model = compile_graph(
        session, graph, config.get("custom-ops-path")[List[Path]]
    )
    metrics.end_timing_startup()

    generate_text(tokenizer, compiled_model, params, config, metrics)
    print()
    metrics.print()


# Passing the inner function allows this function to be shared with `serve.ðŸ”¥`
def outer[
    inner: def[encoding: QuantizationEncoding] (config: Config) -> None
]():
    config = Config()
    set_locale_unicode()
    encoding = config.get("quantization-encoding")[String]

    encoding_urls = Dict[String, String]()
    # fmt: off
    encoding_urls[Q4_0Encoding.id()] = "https://huggingface.co/QuantFactory/Meta-Llama-3-8B-GGUF/resolve/main/Meta-Llama-3-8B.Q4_0.gguf"
    encoding_urls[Q4_KEncoding.id()] = "https://huggingface.co/bartowski/Meta-Llama-3-8B-Instruct-GGUF/resolve/main/Meta-Llama-3-8B-Instruct-Q4_K_M.gguf"
    encoding_urls[Q6_KEncoding.id()] = "https://huggingface.co/bartowski/Meta-Llama-3-8B-Instruct-GGUF/resolve/main/Meta-Llama-3-8B-Instruct-Q6_K.gguf"
    encoding_urls[BFloat16Encoding.id()] = "https://huggingface.co/ddh0/Meta-Llama-3-8B-Instruct-bf16-GGUF/resolve/main/Meta-Llama-3-8B-Instruct-bf16.gguf"
    encoding_urls[Float32Encoding.id()] = "https://huggingface.co/brendanduke/Llama-3-8B-f32.gguf/resolve/main/llama3-8b-f32.gguf"
    # fmt: on

    # Raise error if encoding is not supported
    if encoding not in encoding_urls:
        error = (
            "--quantization-encoding "
            + encoding
            + " is not supported, supported encodings:"
        )
        for item in encoding_urls:
            error += " " + item[]
        raise error

    model_path_config = config.get("model-path")[Path]
    if not str(model_path_config):
        config.set("model-path", download_to_cache(encoding_urls[encoding]))

    if encoding == Q4_0Encoding.id():
        inner[Q4_0Encoding](config)
    elif encoding == Q4_KEncoding.id():
        inner[Q4_KEncoding](config)
    elif encoding == Q6_KEncoding.id():
        inner[Q6_KEncoding](config)
    elif encoding == BFloat16Encoding.id():
        inner[BFloat16Encoding](config)
    elif encoding == Float32Encoding.id():
        inner[Float32Encoding](config)


def llama3_run():
    outer[run]()
