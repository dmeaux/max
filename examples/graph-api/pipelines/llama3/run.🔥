# ===----------------------------------------------------------------------=== #
# Copyright (c) 2024, Modular Inc. All rights reserved.
#
# Licensed under the Apache License v2.0 with LLVM Exceptions:
# https://llvm.org/LICENSE.txt
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ===----------------------------------------------------------------------=== #

from collections import Dict
import sys
from os import setenv
from pathlib import Path
from utils.index import Index

from max.engine import InferenceSession, Model, SessionOptions
from max._driver import (
    Device,
    Tensor,
    cuda_device,
    cpu_device,
)
from max.graph import Graph
from max.graph.quantization import (
    Float32Encoding,
    BFloat16Encoding,
    QuantizationEncoding,
    Q4_0Encoding,
    Q4_KEncoding,
    Q6_KEncoding,
)

from .kv_cache import KVCache
from .metrics import Metrics
from .model.llama import Llama3
from ..tokenizer.tiktoken import TikTokenEncoder
from ..tokenizer.regex import set_locale_unicode
from ..configs.common import get_max_tokens_to_generate
from ..configs.llama import (
    LlamaConfigRegistry,
    get_llama_base_default_config,
    get_llama3_model_url,
    get_llama3_1_model_url,
)
from ..configs.registry import ConfigRegistryDict
from ..configs.parse_args import (
    OptionTypeEnum,
    OptionValue,
    parse_args,
    register_pipeline_configs,
)
from ..samplers.weighted_sampler import WeightedSampler
from ..weights.download import download_to_cache
from ..weights.gguf import GGUFArray, GGUFFile
from ..weights.loadable_model import LlamaHParams, LoadableModel


@value
struct Config:
    """Configuration for token generation runtime options."""

    var config: Dict[String, OptionValue]

    def __init__(inout self):
        additional_arguments = ConfigRegistryDict()
        additional_arguments["version"] = OptionTypeEnum.STRING
        config_registry = LlamaConfigRegistry(additional_arguments)

        default_configs = get_llama_base_default_config()
        default_configs["version"] = String("3.1")
        self.config = register_pipeline_configs(
            config_registry.registry,
            parse_args(),
            default_configs,
        )

        @parameter
        if sys.has_neon():
            encoding = self.config["quantization-encoding"]
            if encoding[String] == "bfloat16":
                raise "bfloat16 is not currently supported on ARM"

    fn get(inout self, key: String) raises -> OptionValue:
        """Returns an option value for `key` in the underlying config.

        Args:
            key: Key for the underlying config option.

        Returns:
            An OptionValue.

        Raises:
            An error for invalid key.
        """
        return self.config[key]

    fn set(inout self, key: String, val: OptionValue):
        """Sets a new value for a given config key. This will overwrite the old
        value if the key is already present.

        Args:
            key: A string based key for the underlying config option.
            val: A new value for a key that already exist.
        """
        self.config[key] = val


def compile_graph(
    session: InferenceSession,
    graph: Graph,
    custom_ops_paths: List[Path] = List[Path](),
) -> Model:
    """Compiles a staged graph using the graph compiler."""
    print("Compiling...")
    return session.load(graph, custom_ops_paths=custom_ops_paths)


def generate_text(
    tokenizer: TikTokenEncoder,
    compiled_model: Model,
    params: LlamaHParams,
    config: Config,
    inout metrics: Metrics,
    execution_device: Device,
    use_gpu: Bool,
):
    """Generates text by applying the compiled model to the provided prompt."""

    host_device = cpu_device() if use_gpu else execution_device

    metrics.begin_timing_prompt()

    prompt = tokenizer.encode(config.get("prompt")[String])
    sampler = WeightedSampler(
        config.get("temperature")[Float64].cast[DType.float32](),
        config.get("min-p")[Float64].cast[DType.float32](),
    )
    metrics.set_tokens_in_prompt(prompt.size)

    tokens = Tensor[DType.int64, rank=2]((1, len(prompt)), host_device)
    for i in range(len(prompt)):
        tokens[0, i] = prompt[i]

    # If a pipeline warmup is needed, create a throwaway KV cache and generate
    # a single output token from the model to exercise the graph.
    if config.get("warmup-pipeline")[Bool]:
        print("Warming up pipeline...")
        metrics.begin_timing_warmup()
        warmup_tokens = Tensor[DType.int64, rank=2](
            (1, len(prompt)), host_device
        )
        for i in range(len(prompt)):
            warmup_tokens[0, i] = prompt[i]
        warmup_kv_cache = KVCache(
            params,
            config.get("max-length")[Int],
            config.get("batch-size")[Int],
            host_device,
        )
        _ = compiled_model._execute(
            warmup_tokens.to_device_tensor().move_to(execution_device),
            warmup_kv_cache.keys_view(execution_device),
            warmup_kv_cache.values_view(execution_device),
        )

        warmup_token = Tensor[DType.int64, rank=2]((1, 1))
        warmup_token[0, 0] = Int64(123)
        _ = compiled_model._execute(
            warmup_token.to_device_tensor().move_to(execution_device),
            warmup_kv_cache.keys_view(execution_device),
            warmup_kv_cache.values_view(execution_device),
        )
        metrics.end_timing_warmup()

    print("Executing...")
    for token in prompt:
        print(tokenizer.decode(token[]), end="")

    kv_cache = KVCache(
        params,
        config.get("max-length")[Int],
        config.get("batch-size")[Int],
        host_device,
    )

    # The first iteration caches the entire prompt and all subsequent
    # iterations generate one token.
    # Avoid overrunning the cache by setting the trip count accordingly.
    metrics.begin_timing_generation()
    max_tokens = get_max_tokens_to_generate(
        prompt.size,
        config.get("max-length")[Int],
        config.get("max-new-tokens")[Int],
    )
    for _ in range(prompt.size, max_tokens + 1):
        results = compiled_model._execute(
            tokens.to_device_tensor().move_to(execution_device),
            kv_cache.keys_view(execution_device),
            kv_cache.values_view(execution_device),
        )

        kv_cache.update(results[1].take(), results[2].take())

        logits = results[0].take().to_device_tensor()
        logits = logits.move_to(host_device)
        logits_tensor = logits.to_tensor[DType.float32, rank=2]()
        token = Int64(sampler.sample(logits_tensor^).selected)

        tokens = Tensor[DType.int64, rank=2]((1, 1), host_device)
        tokens[0, 0] = token

        metrics.new_token()
        print(tokenizer.decode(token), end="")

    _ = kv_cache^
    print()
    metrics.end_timing()


def run[encoding: QuantizationEncoding](config: Config) -> None:
    if config.get("prompt")[String] == "I believe the meaning of life is":
        print("Using default prompt, provide an argument to change it:")
        print('    --prompt "Hello llama3"')
    metrics = Metrics()
    metrics.begin_timing_startup()
    model = Llama3[encoding](config.get("model-path")[Path])
    params = model.hyperparams()

    print("Loading tokenizer...")
    tokenizer = TikTokenEncoder.cl100k_base_llama3(
        model.model["tokenizer.ggml.tokens"]._value.unsafe_get[GGUFArray]()[]
    )

    print("Building model...")
    graph = model.build_graph("llama3")

    use_gpu = config.get("experimental-use-gpu")[Bool]

    execution_device = cuda_device() if use_gpu else cpu_device()
    session_options = SessionOptions(execution_device)
    session = InferenceSession(session_options)

    compiled_model = compile_graph(
        session, graph, config.get("custom-ops-path")[List[Path]]
    )
    metrics.end_timing_startup()

    generate_text(
        tokenizer,
        compiled_model,
        params,
        config,
        metrics,
        execution_device,
        use_gpu,
    )
    print()
    metrics.print()


def llama3_run():
    set_locale_unicode()

    config = Config()
    encoding = config.get("quantization-encoding")[String]

    if not config.get("model-path")[Path]:
        if config.get("version")[String] == "3.0":
            model_path = download_to_cache(get_llama3_model_url(encoding))
        else:
            model_path = download_to_cache(get_llama3_1_model_url(encoding))
        config.set("model-path", model_path)

    if encoding == Q4_0Encoding.id():
        run[Q4_0Encoding](config)
    elif encoding == Q4_KEncoding.id():
        run[Q4_KEncoding](config)
    elif encoding == Q6_KEncoding.id():
        run[Q6_KEncoding](config)
    elif encoding == BFloat16Encoding.id():
        run[BFloat16Encoding](config)
    elif encoding == Float32Encoding.id():
        run[Float32Encoding](config)
    else:
        raise "--quantization-encoding " + encoding + " not supported"
