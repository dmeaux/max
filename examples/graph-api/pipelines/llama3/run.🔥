# ===----------------------------------------------------------------------=== #
# Copyright (c) 2024, Modular Inc. All rights reserved.
#
# Licensed under the Apache License v2.0 with LLVM Exceptions:
# https://llvm.org/LICENSE.txt
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ===----------------------------------------------------------------------=== #

import sys
from collections import List, Optional
from pathlib import cwd, Path
from utils.index import Index

from max.engine import InferenceSession, Model, TensorMap
from max.graph import Graph
from max.graph.quantization import (
    Float32Encoding,
    QuantizationEncoding,
    Q4_0Encoding,
)
from tensor import Tensor, TensorShape, TensorSpec

from .kv_cache import KVCache
from .model.llama import Llama3
from ..tokenizer import AutoTokenizer
from ..weights.download import download_weights_to_cache
from ..weights.gguf import GGUFFile
from ..weights.loadable_model import LlamaHParams, LoadableModel


@value
struct Config:
    """Configuration for token generation runtime options."""

    var batch_size: Int
    var max_tokens: Int
    var model_path: Path
    var custom_ops_paths: List[Path]
    var tokenizer_path: Path
    var prompt: String
    var quantization_encoding: String

    def __init__(
        inout self,
        /,
        batch_size: Int = 1,
        max_tokens: Int = 512,
        model_path: Path = "",
        custom_ops_paths: List[Path] = List[Path](),
        tokenizer_path: Path = "",
        prompt: String = "",
        quantization_encoding: String = "q4_0",
    ):
        self.batch_size = batch_size
        self.max_tokens = max_tokens
        self.model_path = model_path
        self.custom_ops_paths = custom_ops_paths
        self.tokenizer_path = tokenizer_path
        self.prompt = prompt
        self.quantization_encoding = quantization_encoding
        """Encoding for quantized model weights, such as Q4_0."""

        self.parse_args()

    def parse_args(inout self):
        args = sys.argv()

        def parse_argument_value(inout index: Int) -> StringRef:
            if index + 1 >= len(args):
                raise "missing value for parameter `" + str(args[index]) + "`"
            result = args[index + 1]
            index += 2
            return result

        # Skip the run_pipeline.mojo and llama3 arguments.
        i = 2
        while i < len(args):
            if args[i] == "--batch-size":
                self.batch_size = atol(parse_argument_value(i))
            elif args[i] == "--max-tokens":
                self.max_tokens = atol(parse_argument_value(i))
            elif args[i] == "--model-path":
                # If a manual model path has been specified, don't use one of
                # the downloadable pretrained models.
                self.model_path = Path(parse_argument_value(i))
            elif args[i] == "--custom-ops-path":
                self.custom_ops_paths.append(Path(parse_argument_value(i)))
            elif args[i] == "--tokenizer-path":
                self.tokenizer_path = Path(parse_argument_value(i))
            elif args[i] == "--prompt":
                self.prompt = parse_argument_value(i)
            elif args[i] == "--quantization-encoding":
                self.quantization_encoding = String(parse_argument_value(i))
            else:
                raise "unsupported CLI argument: " + String(args[i])

        if self.prompt == "":
            raise "--prompt is a required argument"


def execute(
    session: InferenceSession,
    model: Model,
    tokens: Tensor[DType.int64],
    inout kv_cache: KVCache,
) -> Tensor[DType.int64]:
    """Execute the model predicting one new token."""
    input_map = session.new_tensor_map()
    input_map.borrow("input0", tokens)
    input_map.borrow("input1", kv_cache.keys_view())
    input_map.borrow("input2", kv_cache.values_view())
    results = model.execute(input_map)
    kv_cache.update(
        results.buffer[DType.float32]("output1"),
        results.buffer[DType.float32]("output2"),
    )
    return results.get[DType.int64]("output0")


def compile_graph(
    graph: Graph, custom_ops_paths: List[Path] = List[Path]()
) -> Model:
    """Compiles a staged graph using the graph compiler."""
    session = InferenceSession()

    print("Compiling...")
    return session.load(graph, custom_ops_paths=custom_ops_paths)


def generate_text(compiled_model: Model, params: LlamaHParams, config: Config):
    """Generates text by applying the compiled model to the provided prompt."""
    tokenizer = AutoTokenizer("meta-llama/Meta-Llama-3-8B")

    prompt = tokenizer.encode(config.prompt, bos=String("\n<s>\n"))

    tokens = Tensor[DType.int64](TensorShape(1, len(prompt)))
    for i in range(len(prompt)):
        tokens[Index(0, i)] = prompt[i]

    print("Executing...")
    print(tokenizer.decode(prompt), end="")

    kv_cache = KVCache(params, config.max_tokens, config.batch_size)

    # The first iteration caches the entire prompt and all subsequent
    # iterations generate one token.
    # Avoid overrunning the cache by setting the trip count accordingly.
    for _ in range(prompt.size, config.max_tokens + 1):
        tokens = execute(
            compiled_model._session, compiled_model, tokens, kv_cache
        )
        print(tokenizer.decode(tokens[0, 0]), end="")
    print()


def run[
    model_type: LoadableModel, encoding: QuantizationEncoding
](config: Config):
    print("Building model...")
    model = Llama3[model_type, encoding](config.model_path)
    params = model.hyperparams()
    graph = model.build_graph("llama_model")

    compiled_model = compile_graph(graph, config.custom_ops_paths)

    generate_text(compiled_model, params, config)

    print()


def run_outer[
    run_fn: fn[model_type: LoadableModel, encoding: QuantizationEncoding] (
        Config
    ) raises -> object
]():
    config = Config()

    cache_path = cwd().joinpath(".cache")
    encoding = config.quantization_encoding.lower()
    if encoding == "q4_0":
        config.model_path = cache_path.joinpath("llama3-8b-q4_0-pure.gguf")
        download_weights_to_cache(
            cache_path,
            "https://huggingface.co/brendanduke/Llama-3-8B-q4_0-pure.gguf/resolve/main/llama3-8b-q4_0-pure.gguf",
        )
        run_fn[GGUFFile, Q4_0Encoding](config)
    elif encoding == "float32":
        config.model_path = cache_path.joinpath("llama3-8b-f32.gguf")
        download_weights_to_cache(
            cache_path,
            "https://huggingface.co/brendanduke/Llama-3-8B-f32.gguf/resolve/main/llama3-8b-f32.gguf",
        )
        run_fn[GGUFFile, Float32Encoding](config)
    else:
        raise 'Encoding "' + encoding + '" not yet supported'


def llama3_run():
    run_outer[run]()
