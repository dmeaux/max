# ===----------------------------------------------------------------------=== #
# Copyright (c) 2024, Modular Inc. All rights reserved.
#
# Licensed under the Apache License v2.0 with LLVM Exceptions:
# https://llvm.org/LICENSE.txt
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ===----------------------------------------------------------------------=== #


def get_max_tokens_to_generate(
    prompt_len: Int, max_length: Int, max_new_tokens: Int
) -> Int:
    """Returns the max number of tokens to generate (including the prompt)."""
    if max_new_tokens < 0:
        return max_length

    return min(max_new_tokens + prompt_len, max_length)


def check_url_exists(urls: Dict[String, String], encoding: String):
    """
    This helper function takes in a dictionary of encoding to pre-defined URLs
    for downloading the respective weights and checks if the given encoding exists.
    Raises an error if it's not found.

    Args:
        urls: A dictionary of String keys and values representing encoding to
              URLs for downloading said weight types.
        encoding: The wanted encoding.
    Raises:
        An error if the given encoding has no pre-defined URL.
    """
    if encoding not in urls:
        error = (
            "encoding: "
            + encoding
            + " has no pre-defined URL, choose from encodings:"
        )
        for item in urls:
            error += " " + item[]
        raise error
