# ===----------------------------------------------------------------------=== #
# Copyright (c) 2024, Modular Inc. All rights reserved.
#
# Licensed under the Apache License v2.0 with LLVM Exceptions:
# https://llvm.org/LICENSE.txt
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ===----------------------------------------------------------------------=== #
"""Functions for lazily downloading model weights on first execution."""


import os
from pathlib import Path
from sys.ffi import external_call


def modular_cache_dir() -> Path:
    """Follow the convention for caching downloads."""
    xdg_cache_home = os.getenv("XDG_CACHE_HOME")
    if xdg_cache_home:
        return Path(xdg_cache_home) / "modular"
    return Path.home() / ".cache" / "modular"


def download_to_cache(url: String) -> Path:
    """If file doesn't exist download to `.cache` and return path."""
    cache_path = modular_cache_dir()
    os.makedirs(cache_path, exist_ok=True)
    last_component = url.split("/")[-1]
    destination = cache_path.joinpath(last_component)

    if not destination.is_file():
        tmp_destination = str(destination) + ".tmp"
        curl_command = str("curl {} -L -J -o {}").format(url, tmp_destination)
        external_call["system", NoneType](
            Reference(curl_command.as_bytes_slice()[0])
        )

        # Once finished, mv the file so we hit the cache next time
        cmd = str("mv {} {}").format(tmp_destination, destination)
        external_call["system", NoneType](Reference(cmd.as_bytes_slice()[0]))

    return destination
