# ===----------------------------------------------------------------------=== #
# Copyright (c) 2024, Modular Inc. All rights reserved.
#
# Licensed under the Apache License v2.0 with LLVM Exceptions:
# https://llvm.org/LICENSE.txt
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ===----------------------------------------------------------------------=== #

import sys
from python import Python, PythonObject
from sys.ffi import DLHandle
from utils.index import Index
from pathlib import Path

from max.engine import InferenceSession, Model, TensorMap
from max.driver import cpu_device, Tensor
from max.driver._cuda import cuda_device
from max._utils import handle_from_config, call_dylib_func
from max.graph import Graph
from max.graph.quantization import (
    QuantizationEncoding,
    Float32Encoding,
    Q4_0Encoding,
    Q4_KEncoding,
    Q6_KEncoding,
)
from max.serve.http import PythonServer, PythonService
from max.tensor import TensorShape, TensorSpec

from ..llama3.kv_cache import KVCache
from .model.llama import Llama2
from .tokenizer.bpe import BPETokenizer
from ..samplers.weighted_sampler import WeightedSampler
from ..tokenizer import AutoTokenizer, Tokenizer
from ..weights.gguf import GGUFFile
from ..weights.download import download_to_cache
from ..weights.llama2checkpoint import LlamaCFile
from ..weights.loadable_model import LlamaHParams, LoadableModel
from ..configs.llama import get_llama2_model_url

from .run import (
    Config,
    compile_graph,
    get_max_tokens_to_generate,
    compile_graph,
    _generate_text_with_tokenizer,
)


struct Llama2InferenceService[
    ModelType: LoadableModel,
    EncodingT: QuantizationEncoding = Float32Encoding,
    TokenizerT: Tokenizer = AutoTokenizer,
](PythonService):
    """Inference service for Llama2."""

    var _config: Config
    var _tokenizer: TokenizerT
    var _session: InferenceSession
    var _model: Llama2[ModelType, EncodingT]
    var _graph: Graph
    var _compiled_model: Model

    var _json_module: PythonObject

    fn __init__(
        inout self,
        owned config: Config,
        owned tokenizer: TokenizerT,
    ) raises:
        self._config = config^
        self._tokenizer = tokenizer^
        self._json_module = Python.import_module("json")
        self._model = Llama2[ModelType, EncodingT](
            self._config.get("model-path")[Path],
        )

        print("Building model...")
        self._graph = self._model.build_graph("llama2")
        self._session = InferenceSession()

        self._compiled_model = compile_graph(
            self._session,
            self._graph,
            custom_ops_paths=self._config.get("custom-ops-path")[List[Path]],
        )

    fn handle(
        inout self, owned body: PythonObject, owned handler: PythonObject
    ) raises -> None:
        if handler.path != "/v1/chat/completions":
            handler.send_response(500)
            handler.end_headers()
            return

        # TODO: Support GPU workflow in the serving case.
        var use_gpu = self._config.get("experimental-use-gpu")[Bool]
        var cpu_device = cpu_device()

        var stream = False
        if body.get("stream") is not None and body["stream"]:
            stream = True

        # Tokenize prompt and message contents.
        var raw_prompt: String = ""
        for node in body["messages"]:
            raw_prompt += str(node["role"]) + ":" + str(node["content"]) + "\n"

        var prompt = self._tokenizer.encode(raw_prompt, bos=String("\n<s>\n"))
        var sampler = WeightedSampler(
            self._config.get("temperature")[Float64].cast[DType.float32](),
            self._config.get("min-p")[Float64].cast[DType.float32](),
        )
        var tokens = Tensor[DType.int64, rank=2]((1, len(prompt)), cpu_device)
        for i in range(len(prompt)):
            tokens[0, i] = prompt[i]

        var outputs = List[String]()

        print("Executing...")
        print(self._tokenizer.decode(prompt), end="")

        var kv_cache = KVCache(
            self._model.model.hyperparams(),
            self._config.get("max-length")[Int],
            self._config.get("batch-size")[Int],
            cpu_device,
        )

        var max_tokens = get_max_tokens_to_generate(
            prompt.size,
            self._config.get("max-length")[Int],
            self._config.get("max-new-tokens")[Int],
        )

        if stream:
            handler.send_response(200)
            handler.send_header("Content-type", "text/event-stream")
            handler.end_headers()

        # The first iteration caches the entire prompt and all subsequent
        # iterations generate one token.
        # Avoid overrunning the cache by setting the trip count accordingly.
        for _ in range(prompt.size, max_tokens + 1):
            var results = self._compiled_model.execute(
                tokens^,
                kv_cache.keys_view(cpu_device),
                kv_cache.values_view(cpu_device),
            )

            kv_cache.update(results[1].take(), results[2].take())

            var logits = results[0].take().to_device_tensor()
            logits = logits.move_to(cpu_device)
            var logits_tensor = logits.to_tensor[DType.float32, rank=2]()
            var token = Int64(sampler.sample(logits_tensor^).selected)

            tokens = Tensor[DType.int64, rank=2]((1, 1), cpu_device)
            tokens[0, 0] = token

            if self._tokenizer.is_end_of_text(token):
                break

            var next_token = self._tokenizer.decode(token)
            if not stream:
                outputs.append(next_token)
            else:
                # Write chunk response if streaming.
                var chunk = Python.dict()
                var choices = Python.list()
                var choice = Python.dict()
                var delta = Python.dict()
                delta["content"] = next_token
                choice["index"] = 0
                choice["delta"] = delta
                choices.append(choice)
                chunk["choices"] = choices

                var json_str = self._json_module.dumps(chunk).encode(
                    encoding="utf_8"
                )
                try:
                    handler.wfile.write(PythonObject("data: ").encode("utf-8"))
                    handler.wfile.write(json_str)
                    handler.wfile.write(PythonObject("\n\n").encode("utf-8"))
                    handler.wfile.flush()
                except BrokenPipeError:
                    break

        # Write complete response if not streaming.
        if stream:
            handler.wfile.write(PythonObject("data: [DONE]\n").encode("utf-8"))
            handler.wfile.flush()
        else:
            var raw_message: String = ""
            for output in outputs:
                raw_message += output[]

            var choice = Python.dict()
            var message = Python.dict()
            message["role"] = "assistant"
            message["content"] = raw_message
            choice["index"] = 0
            choice["message"] = message

            var choices = Python.list()
            choices.append(choice)
            var resp = Python.dict()
            resp["choices"] = choices
            var json_str = self._json_module.dumps(resp).encode(
                encoding="utf_8"
            )
            handler.send_response(200)
            handler.send_header("Content-type", "text/json")
            handler.end_headers()

            handler.wfile.write(json_str)


def serve[
    ModelType: LoadableModel,
    EncodingT: QuantizationEncoding,
    TokenizerT: Tokenizer = AutoTokenizer,
](owned config: Config, owned tokenizer: TokenizerT):
    service = Llama2InferenceService[ModelType, EncodingT, TokenizerT](
        config^, tokenizer^
    )
    server = PythonServer.create("0.0.0.0:8000")
    print("Listening on port 8000!")
    server.serve(service)


def setup_tokenizer[
    ModelType: LoadableModel,
    EncodingT: QuantizationEncoding = Float32Encoding,
](config: Config) -> None:
    print("Loading tokenizer...")
    try:
        serve[ModelType, EncodingT](
            config, AutoTokenizer("meta-llama/Llama-2-7b-hf")
        )
    except e:
        # Fall back to the Mojo tokenizer if setting up the AutoTokenizer
        # fails, for example due to lack of authentication.
        print("Unable to initialize AutoTokenizer:", e)
        print("Using Mojo tokenizer instead.")
        tokenizer_path = config.get("tokenizer-path")[Path]
        if not str(tokenizer_path):
            config.set(
                "tokenizer-path",
                download_to_cache(
                    "https://github.com/tairov/llama2.mojo/raw/master/tokenizer.bin"
                ),
            )
        serve[ModelType, EncodingT, BPETokenizer](
            config, BPETokenizer.from_file(config.get("tokenizer-path")[Path])
        )


def llama2_serve():
    config = Config()
    encoding = config.get("quantization-encoding")[String]

    if not config.get("model-path")[Path]:
        model_path = download_to_cache(get_llama2_model_url(encoding))
        config.set("model-path", model_path)

    if encoding == Float32Encoding.id():
        setup_tokenizer[LlamaCFile, Float32Encoding](config)
    elif encoding == Q4_0Encoding.id():
        setup_tokenizer[GGUFFile, Q4_0Encoding](config)
    elif encoding == Q4_KEncoding.id():
        setup_tokenizer[GGUFFile, Q4_KEncoding](config)
    elif encoding == Q6_KEncoding.id():
        setup_tokenizer[GGUFFile, Q6_KEncoding](config)
    else:
        raise "--quantization-encoding " + encoding + " not supported"
