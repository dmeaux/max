# ===----------------------------------------------------------------------=== #
# Copyright (c) 2024, Modular Inc. All rights reserved.
#
# Licensed under the Apache License v2.0 with LLVM Exceptions:
# https://llvm.org/LICENSE.txt
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ===----------------------------------------------------------------------=== #

import sys
from pathlib import Path
from utils.index import Index

from max.engine import InferenceSession, Model, SessionOptions
from max._driver import cpu_device, cuda_device
from max.graph import Graph
from max.graph.quantization import (
    Float32Encoding,
    QuantizationEncoding,
    Q4_0Encoding,
    Q4_KEncoding,
    Q6_KEncoding,
)
from max.tensor import Tensor, TensorShape

from .kv_cache import KVCache
from ..llama3.metrics import Metrics
from .model.llama import Llama2
from ..samplers.weighted_sampler import WeightedSampler
from .tokenizer.bpe import BPETokenizer
from ..configs.common import get_max_tokens_to_generate
from ..configs.llama import (
    get_llama2_model_url,
    LlamaConfigRegistry,
    get_llama_base_default_config,
)
from ..configs.registry import ConfigRegistryDict
from ..configs.parse_args import (
    OptionTypeEnum,
    OptionValue,
    parse_args,
    register_pipeline_configs,
)
from ..tokenizer import AutoTokenizer, Tokenizer
from ..weights.download import download_to_cache
from ..weights.gguf import GGUFFile
from ..weights.llama2checkpoint import LlamaCFile
from ..weights.loadable_model import LlamaHParams, LoadableModel


@value
struct Config:
    """Configuration for token generation runtime options."""

    var config: Dict[String, OptionValue]

    def __init__(inout self):
        config_registry = LlamaConfigRegistry(ConfigRegistryDict())

        default_configs = get_llama_base_default_config()
        self.config = register_pipeline_configs(
            config_registry.registry,
            parse_args(),
            default_configs,
        )

        # Check for invalid config
        model_path = self.config["model-path"]
        quantization_encoding = self.config["quantization-encoding"]
        if (
            model_path[Path].suffix() != ".gguf"
            and not quantization_encoding[String]
        ):
            raise (
                "`--model-path` must be `.bin` or `.gguf` file. "
                "Alternatively provide a `--quantization-encoding`"
            )

    fn get(inout self, key: String) raises -> OptionValue:
        """Returns an option value for `key` in the underlying config.

        Args:
            key: Key for the underlying config option.

        Returns:
            An OptionValue.

        Raises:
            An error for invalid key.
        """
        return self.config[key]

    fn set(inout self, key: String, val: OptionValue):
        """Sets a new value for a given config key. This will overwrite the old
        value if the key is already present.

        Args:
            key: A string based key for the underlying config option.
            val: A new value for a key that already exist.
        """
        self.config[key] = val


def execute(
    session: InferenceSession,
    model: Model,
    tokens: Tensor[DType.int64],
    inout kv_cache: KVCache,
) -> Tensor[DType.float32]:
    """Execute the model predicting one new token."""
    input_map = session.new_tensor_map()
    input_map.borrow("input0", tokens)
    input_map.borrow("input1", kv_cache.keys_view())
    input_map.borrow("input2", kv_cache.values_view())
    results = model.execute(input_map)
    kv_cache.update(
        results.buffer[DType.float32]("output1"),
        results.buffer[DType.float32]("output2"),
    )
    return results.get[DType.float32]("output0")


def compile_graph(
    session: InferenceSession,
    graph: Graph,
    custom_ops_paths: List[Path] = List[Path](),
) -> Model:
    """Compiles a staged graph using the graph compiler."""
    print("Compiling...")
    return session.load(graph, custom_ops_paths=custom_ops_paths)


def _generate_text_with_tokenizer[
    tokenizer_type: Tokenizer
](
    inout tokenizer: tokenizer_type,
    compiled_model: Model,
    params: LlamaHParams,
    config: Config,
    inout metrics: Metrics,
):
    metrics.begin_timing_prompt()
    prompt = tokenizer.encode(
        config.get("prompt")[String], bos=String("\n<s>\n")
    )
    metrics.set_tokens_in_prompt(prompt.size)
    sampler = WeightedSampler(
        config.get("temperature")[Float64].cast[DType.float32](),
        config.get("min-p")[Float64].cast[DType.float32](),
    )
    tokens = Tensor[DType.int64](TensorShape(1, len(prompt)))
    for i in range(len(prompt)):
        tokens[Index(0, i)] = prompt[i]

    print("Executing...")
    print(tokenizer.decode(prompt), end="")

    max_length = config.get("max-length")[Int]
    kv_cache = KVCache(params, max_length, config.get("batch-size")[Int])

    # The first iteration caches the entire prompt and all subsequent
    # iterations generate one token.
    # Avoid overrunning the cache by setting the trip count accordingly.
    metrics.begin_timing_generation()
    max_tokens = get_max_tokens_to_generate(
        prompt.size,
        config.get("max-length")[Int],
        config.get("max-new-tokens")[Int],
    )
    for _ in range(prompt.size, max_tokens + 1):
        logits = execute(
            compiled_model._session, compiled_model, tokens, kv_cache
        )
        var token: SIMD[DType.int64, 1] = sampler.sample(logits).selected
        tokens = Tensor(TensorShape(1, 1), token)
        metrics.new_token()
        print(tokenizer.decode(token), end="")
    print()
    metrics.end_timing()


def generate_text(
    compiled_model: Model,
    params: LlamaHParams,
    config: Config,
    inout metrics: Metrics,
):
    """Generates text by applying the compiled model to the provided prompt."""

    # Prefer the AutoTokenizer if it is available, for correctness.
    try:
        auto_tokenizer = AutoTokenizer("meta-llama/Llama-2-7b-hf")
        _generate_text_with_tokenizer[AutoTokenizer](
            auto_tokenizer,
            compiled_model,
            params,
            config,
            metrics,
        )
    except e:
        print("Unable to initialize AutoTokenizer:", e)
        print("Using Mojo tokenizer instead.")
        # Fall back to the Mojo tokenizer if setting up the AutoTokenizer
        # fails, for example due to lack of authentication.
        tokenizer_path_config = config.get("tokenizer-path")[Path]
        if not str(tokenizer_path_config):
            config.set(
                "tokenizer-path",
                download_to_cache(
                    "https://github.com/tairov/llama2.mojo/raw/master/tokenizer.bin"
                ),
            )

        mojo_tokenizer = BPETokenizer.from_file(
            config.get("tokenizer-path")[Path]
        )
        _generate_text_with_tokenizer[BPETokenizer](
            mojo_tokenizer,
            compiled_model,
            params,
            config,
            metrics,
        )


def run[
    model_type: LoadableModel, encoding: QuantizationEncoding = Float32Encoding
](config: Config) -> None:
    if config.get("prompt")[String] == "I believe the meaning of life is":
        print("Using default prompt, provide an argument to change it:")
        print('    --prompt "Hello llama3"')
    metrics = Metrics()
    metrics.begin_timing_startup()
    model = Llama2[model_type, encoding](
        config.get("model-path")[Path],
    )
    params = model.hyperparams()
    graph = model.build_graph("llama2")

    session_options = SessionOptions(
        cuda_device() if config.get("experimental-use-gpu")[
            Bool
        ] else cpu_device()
    )
    session = InferenceSession(session_options)

    compiled_model = compile_graph(
        session, graph, config.get("custom-ops-path")[List[Path]]
    )
    metrics.end_timing_startup()

    generate_text(compiled_model, params, config, metrics)
    print()
    metrics.print()


def llama2_run():
    config = Config()
    encoding = config.get("quantization-encoding")[String]

    if not config.get("model-path")[Path]:
        model_path = download_to_cache(get_llama2_model_url(encoding))
        config.set("model-path", model_path)

    if encoding == Float32Encoding.id():
        run[LlamaCFile, Float32Encoding](config)
    elif encoding == Q4_0Encoding.id():
        run[GGUFFile, Q4_0Encoding](config)
    elif encoding == Q4_KEncoding.id():
        run[GGUFFile, Q4_KEncoding](config)
    elif encoding == Q6_KEncoding.id():
        run[GGUFFile, Q6_KEncoding](config)
    else:
        raise "--quantization-encoding " + encoding + " not supported"
