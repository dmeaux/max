# ===----------------------------------------------------------------------=== #
# Copyright (c) 2024, Modular Inc. All rights reserved.
#
# Licensed under the Apache License v2.0 with LLVM Exceptions:
# https://llvm.org/LICENSE.txt
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ===----------------------------------------------------------------------=== #
"""KV cache for the Transformer."""


from max.engine import TensorMap
from max.tensor import Tensor, TensorShape, TensorSpec
from .llama import Llama2


@value
struct KVCacheView[float_dtype: DType]:
    """Non-owning view into the KV cache backing `Tensor`."""

    var spec: TensorSpec
    var ptr: DTypePointer[float_dtype]


fn cache_init[
    float_dtype: DType
](model: Llama2, size: Int, batch_size: Int) -> Tensor[float_dtype]:
    constrained[float_dtype.is_floating_point(), "expected float dtype"]()

    return Tensor[float_dtype](
        TensorShape(
            size,
            model.hyperparams.n_layers,
            batch_size,
            model.hyperparams.n_kv_heads,
            model.hyperparams.head_dim,
        )
    )


fn cache_view[
    float_dtype: DType
](size: Int, buff: Tensor[float_dtype]) -> KVCacheView[float_dtype]:
    var shape = buff.shape()
    return KVCacheView[float_dtype](
        TensorSpec(float_dtype, size, shape[1], shape[2], shape[3], shape[4]),
        buff.unsafe_ptr(),
    )


fn cache_update[
    float_dtype: DType
](
    results: TensorMap,
    name: String,
    buff: Tensor[float_dtype],
    current: KVCacheView[float_dtype],
    n: Int,
) raises:
    constrained[float_dtype.is_floating_point(), "expected float dtype"]()

    var update = results.buffer[float_dtype](name)
    var shape = buff.shape()
    var stride = shape[1] * shape[2] * shape[3] * shape[4]
    var pos = current.spec[0]
    memcpy(buff.unsafe_ptr() + pos * stride, update.data, n * stride)
